/*******************************************
  MIXINS
  src/scss/modules/_mixins.scss
*******************************************/


/*********************
TRANSITION
*********************/

/* @include transition(all 0.2s ease-in-out); */
@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition: $transition;
  }
}



/**************************
      
      WITH COUNT

      Allows you to apply different styling based on the number of a certain type
      of element within a shared parent.

      Example below changes the width based on the number of .child class items in a shared parent

      .child {
        display: inline-block;

        @include by-count(1, '.button') { width: 100%; }
        @include by-count(2, '.button') { width: calc(50% - 1px); }
        @include by-count(3, '.button') { width: calc(33.3% - 1px); }
        @include by-count(4, '.button') { width: calc(25% - 1px); }
        @include by-count(5, '.button') { width: calc(20% - 1px); }
      }

**************************/

@mixin by-count($sibling-count, $sibling, $every-nth: null) {
    $colon: ":";  // Can't use literal : in expressions, so we'll use this

    @if ($every-nth) {
        $sibling: #{$sibling}#{$colon}nth-child(#{$every-nth});
    }

    &:first-child:nth-last-child(#{$sibling-count}),
    &:first-child:nth-last-child(#{$sibling-count}) ~ #{$sibling} {
        @content;
    }
}





/************************

      BREAKPOINT MIXINS

      Example 

      .site-header {
          padding: 2rem;
          font-size: 1.8rem;
          @include mq('tablet-wide') {
              padding-top: 4rem;
              font-size: 2.4rem;
          }
      }

*************************/

@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
    @else {
      @media only screen and (#{$type}-width: $width) {
            @content;
      }
    }
}


// used for vertical breakpoints, must pass size
@mixin mqh($width, $type: min) {
    @media only screen and (#{$type}-height: $width) {
          @content;
    }
}




/************************
      
      CLEARFIX

      Example

      .container-with-floated-children {
        @extend %clearfix;
      }

*************************/

%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}


%nowiggle {
  -webkit-backface-visibility: hidden;
}



/************************
      
      HARDWARE

      Simple and effective for when you need to trigger hardware acceleration 
      for some animation, keeping everything fast, slick and flicker-free.

      @include hardware();

*************************/

@mixin hardware($backface: true, $perspective: 1000) {
    @if $backface {
        backface-visibility: hidden;
    }
    perspective: $perspective;
}